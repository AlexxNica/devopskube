{
    "docs": [
        {
            "location": "/",
            "text": "DevOpsKube\n\n\nA Kubernetes \"cluster\" with all things SDLC (Software Development Life Cycle)/DevOps related.\n\n\nMotivation\n\n\nIt was/is the dream of the team to be able to install such a stack easily on own Hardware and/or environment. Kubernetes seems like the natural choice for this.\n\n\nUp until now there is no full DevOps Stack for vanilla Kubernetes. The following \"solutions\" can be found when googling:\n\n\n\n\nfabric8\n - probably the closest to our requirements, and we already talk about some interaction between the two projects\n\n\nHarbur\n - mainly focused on docker and has no real kubernetes support\n\n\nSoftware Factory\n - from RedHat as well, based on OpenStack\n\n\nMarcel Birkner\n - a blog-post from codecentric (merely an blog-post with some docker containers)\n\n\nGoPaddle\n - seems to be focused on a full CI Environment to install Container on Kubernetes and uses eg. Jenkins, but is commercial and has a different focus then the above mentioned ones\n\n\n\n\nNone of the above mentioned stacks do fulfill our needs, therefor we decided to put this stack together to allow you to install a full SDLC stack on your own Kubernetes cluster.\n\n\nComponents\n\n\nThe following components are included in the current version:\n\n\n\n\nRedmine\n - Project Management/Issue Tracking\n\n\nJenkins\n - Automation Server for CI and CD stuff\n\n\nTheNexus\n - Central Repository for Maven/Gradle/...\n\n\nSonarQube\n - Platform to manage code quality\n\n\nGogs\n - central Git Repository\n\n\nKeycloak\n - central authentication server\n\n\n\n\nTo provide central data-storeage options we are using \nMySql\n for all components in need of a database.\n\n\nHelper\n\n\nSince a vanilla Kubernetes Cluster does not provide any Edge-Loadbalancer or an SSO-Component, we are going to provide documentation on how to setup the whole cluster including an Edge-Loadbalancer and other useful tools (eg. SSO Components). An initial set of Helpers are:\n\n\n\n\nNginx Ingress\n - Load-Balancing for Kubernetes PODs\n\n\nKube-Lego\n - Kube-Lego automatically requests certificates for Kubernetes Ingress resources from Let's Encrypt\n\n\n\n\nFor the use of a configurable set of PODs, we are using \nhelm\n in its latest (not yet ready for production) incarnation (> 2.0.0-alpha5).\n\n\nContributions\n\n\nContributions to this project are very welcome. Please do not hesitate to fork this project and provide pull-requests. We try to integrate those asap.\n\n\nDocumentation is always nice, so pull-requests not only for code is welcome as well.\n\n\nContributions could be in the area of new features and/or bugs as well, please open a GitHub-Issue for this.\n\n\nDocumentation\n\n\nThis documentation is generated using \nMkDocs\n. If you are editing this documentation, please make sure, that the Documentation can be generated. Provide a Pull-Request, if all is fine. We are then updating the Documentation. For details on how to generate the documentation, see the \nbuild-docs.sh\n script.",
            "title": "Home"
        },
        {
            "location": "/#devopskube",
            "text": "A Kubernetes \"cluster\" with all things SDLC (Software Development Life Cycle)/DevOps related.",
            "title": "DevOpsKube"
        },
        {
            "location": "/#motivation",
            "text": "It was/is the dream of the team to be able to install such a stack easily on own Hardware and/or environment. Kubernetes seems like the natural choice for this.  Up until now there is no full DevOps Stack for vanilla Kubernetes. The following \"solutions\" can be found when googling:   fabric8  - probably the closest to our requirements, and we already talk about some interaction between the two projects  Harbur  - mainly focused on docker and has no real kubernetes support  Software Factory  - from RedHat as well, based on OpenStack  Marcel Birkner  - a blog-post from codecentric (merely an blog-post with some docker containers)  GoPaddle  - seems to be focused on a full CI Environment to install Container on Kubernetes and uses eg. Jenkins, but is commercial and has a different focus then the above mentioned ones   None of the above mentioned stacks do fulfill our needs, therefor we decided to put this stack together to allow you to install a full SDLC stack on your own Kubernetes cluster.",
            "title": "Motivation"
        },
        {
            "location": "/#components",
            "text": "The following components are included in the current version:   Redmine  - Project Management/Issue Tracking  Jenkins  - Automation Server for CI and CD stuff  TheNexus  - Central Repository for Maven/Gradle/...  SonarQube  - Platform to manage code quality  Gogs  - central Git Repository  Keycloak  - central authentication server   To provide central data-storeage options we are using  MySql  for all components in need of a database.",
            "title": "Components"
        },
        {
            "location": "/#helper",
            "text": "Since a vanilla Kubernetes Cluster does not provide any Edge-Loadbalancer or an SSO-Component, we are going to provide documentation on how to setup the whole cluster including an Edge-Loadbalancer and other useful tools (eg. SSO Components). An initial set of Helpers are:   Nginx Ingress  - Load-Balancing for Kubernetes PODs  Kube-Lego  - Kube-Lego automatically requests certificates for Kubernetes Ingress resources from Let's Encrypt   For the use of a configurable set of PODs, we are using  helm  in its latest (not yet ready for production) incarnation (> 2.0.0-alpha5).",
            "title": "Helper"
        },
        {
            "location": "/#contributions",
            "text": "Contributions to this project are very welcome. Please do not hesitate to fork this project and provide pull-requests. We try to integrate those asap.  Documentation is always nice, so pull-requests not only for code is welcome as well.  Contributions could be in the area of new features and/or bugs as well, please open a GitHub-Issue for this.",
            "title": "Contributions"
        },
        {
            "location": "/#documentation",
            "text": "This documentation is generated using  MkDocs . If you are editing this documentation, please make sure, that the Documentation can be generated. Provide a Pull-Request, if all is fine. We are then updating the Documentation. For details on how to generate the documentation, see the  build-docs.sh  script.",
            "title": "Documentation"
        },
        {
            "location": "/setup/single-node/",
            "text": "Setup Single Node\n\n\nFor a detailed description on the installation on how to install a Kubernetes 1.4 single-node \"cluster\" at Netcup, please have a look in our \ndevopskube-single-node Repository\n.",
            "title": "Setup Single Node"
        },
        {
            "location": "/setup/single-node/#setup-single-node",
            "text": "For a detailed description on the installation on how to install a Kubernetes 1.4 single-node \"cluster\" at Netcup, please have a look in our  devopskube-single-node Repository .",
            "title": "Setup Single Node"
        },
        {
            "location": "/setup/helm/",
            "text": "Setup Helm\n\n\nHelm is a tool for managing Kubernetes charts. Charts are packages of pre-configured Kubernetes resources. helm is still in its infancy and not production ready, documentation can be found \nhere\n.\n\n\nhelm can now downloaded from the above mentioned page and installed using the described method in the \ninstall\n document.\n\n\nWe do use version 2.0.0-alpha5 of helm, so make sure, that you are using the same or a later version.",
            "title": "Setup Helm"
        },
        {
            "location": "/setup/helm/#setup-helm",
            "text": "Helm is a tool for managing Kubernetes charts. Charts are packages of pre-configured Kubernetes resources. helm is still in its infancy and not production ready, documentation can be found  here .  helm can now downloaded from the above mentioned page and installed using the described method in the  install  document.  We do use version 2.0.0-alpha5 of helm, so make sure, that you are using the same or a later version.",
            "title": "Setup Helm"
        },
        {
            "location": "/components/gogs/",
            "text": "Gogs - Go Git Service\n\n\nGogs\n is a painless self-hosted Git service. It is used in our environment to allow an easy management of Git-Repositories.\n\n\nRight now we do use version 0.9.97.\n\n\nChart Details\n\n\nThis chart uses the \nDocker image\n provided by gogs itself. Furthermore it has a requirement on our Mysql-Chart to provide a datastore.\n\n\nGet this Chart\n\n\nOur central repository is located at: \nhttps://devopsku.be/charts\n, please configure this in your helm installation (via \nhelm repo add\n). Then you can download and install this chart using the usual helm procedure (see \nUsing Helm\n).\n\n\nIf you would like to contribute and/or like to make changes on this chart, please clone this repo via:\n\n\ngit clone https://github.com/devopskube/devopskube.git\n\n\nInstalling the chart\n\n\nIf you have cloned this repository, you do need to update the requirements of this chart beforehand via \nhelm dependencies update\n in the chart-folder.\n\n\nOther installation-instructions can be found on the above mentioned \nUsing Helm\n page.\n\n\nConfiguration\n\n\nThe following tables lists the configurable parameters of the Gogs chart and their default values.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndomainName\n\n\nDomain Name of this Gogs Instance\n\n\nexample.com\n\n\n\n\n\n\nhostName\n\n\nHost Name of this Gogs Instance\n\n\ngogs.example.com\n\n\n\n\n\n\nhttpContainerPort\n\n\nHTTP Port of gogs in the container\n\n\n3000\n\n\n\n\n\n\nsshContainerPort\n\n\nSSH Port of gogs in the container\n\n\n2222\n\n\n\n\n\n\nstartSshServer\n\n\nShould the SSH-Server of gogs be startet\n\n\ntrue\n\n\n\n\n\n\npersistence.dataPath\n\n\nPath on the host, where gogs stores data\n\n\n/data/gogs/data\n\n\n\n\n\n\ndatabaseType\n\n\nThe databaseType \nmysql\n. \npostgres\n or \nsqlite3\n\n\nmysql\n\n\n\n\n\n\nmysql.databaseName\n\n\nThe name of the database\n\n\ngogs\n\n\n\n\n\n\nmysql.databaseUser\n\n\nThe database user\n\n\ngogs\n\n\n\n\n\n\nmysql.databasePassword\n\n\nThe password of the database\n\n\ngogs\n\n\n\n\n\n\nmysql.persistence.path\n\n\nthe path where the mysql stores the data on the  node\n\n\n/data/gogs/mysql\n\n\n\n\n\n\n\n\n\n\nNOTE\n: If you do change the sshContainerPort, you also have to change this port in the nginx-ingress-controller.\n\n\n\n\nFurther configuration settings can easily added in the deployment.yaml file and/or in the configmap-gogs.yaml. Please have a look on the Gogs \nconfiguration cheat sheet\n for a detailed explanation of settings.\n\n\nSpecify each parameter using the --set key=value[,key=value] argument to helm install.\n\n\nAlternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,\n\n\n$ helm install --name my-gogs -f values.private.yaml gogs-x.x.x.tgz\n\n\n\n\n\n\nTip\n: You can use the default \nvalues.yaml\n\n\n\n\nPersistence\n\n\nTo be able to keep stateful data in the gogs kubernetes container, the following path is used:\n\n\n/data/gogs/data\n\n\n\n\nRight now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.\n\n\nTodo\n\n\n\n\nAdopt persistence to be able to run this in the cloud as well as on single node \"clusters\"\n\n\nUpdate to a later version of MariaDb",
            "title": "Gogs"
        },
        {
            "location": "/components/gogs/#gogs-go-git-service",
            "text": "Gogs  is a painless self-hosted Git service. It is used in our environment to allow an easy management of Git-Repositories.  Right now we do use version 0.9.97.",
            "title": "Gogs - Go Git Service"
        },
        {
            "location": "/components/gogs/#chart-details",
            "text": "This chart uses the  Docker image  provided by gogs itself. Furthermore it has a requirement on our Mysql-Chart to provide a datastore.",
            "title": "Chart Details"
        },
        {
            "location": "/components/gogs/#get-this-chart",
            "text": "Our central repository is located at:  https://devopsku.be/charts , please configure this in your helm installation (via  helm repo add ). Then you can download and install this chart using the usual helm procedure (see  Using Helm ).  If you would like to contribute and/or like to make changes on this chart, please clone this repo via:  git clone https://github.com/devopskube/devopskube.git",
            "title": "Get this Chart"
        },
        {
            "location": "/components/gogs/#installing-the-chart",
            "text": "If you have cloned this repository, you do need to update the requirements of this chart beforehand via  helm dependencies update  in the chart-folder.  Other installation-instructions can be found on the above mentioned  Using Helm  page.",
            "title": "Installing the chart"
        },
        {
            "location": "/components/gogs/#configuration",
            "text": "The following tables lists the configurable parameters of the Gogs chart and their default values.     Parameter  Description  Default      domainName  Domain Name of this Gogs Instance  example.com    hostName  Host Name of this Gogs Instance  gogs.example.com    httpContainerPort  HTTP Port of gogs in the container  3000    sshContainerPort  SSH Port of gogs in the container  2222    startSshServer  Should the SSH-Server of gogs be startet  true    persistence.dataPath  Path on the host, where gogs stores data  /data/gogs/data    databaseType  The databaseType  mysql .  postgres  or  sqlite3  mysql    mysql.databaseName  The name of the database  gogs    mysql.databaseUser  The database user  gogs    mysql.databasePassword  The password of the database  gogs    mysql.persistence.path  the path where the mysql stores the data on the  node  /data/gogs/mysql      NOTE : If you do change the sshContainerPort, you also have to change this port in the nginx-ingress-controller.   Further configuration settings can easily added in the deployment.yaml file and/or in the configmap-gogs.yaml. Please have a look on the Gogs  configuration cheat sheet  for a detailed explanation of settings.  Specify each parameter using the --set key=value[,key=value] argument to helm install.  Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,  $ helm install --name my-gogs -f values.private.yaml gogs-x.x.x.tgz   Tip : You can use the default  values.yaml",
            "title": "Configuration"
        },
        {
            "location": "/components/gogs/#persistence",
            "text": "To be able to keep stateful data in the gogs kubernetes container, the following path is used:  /data/gogs/data  Right now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.",
            "title": "Persistence"
        },
        {
            "location": "/components/gogs/#todo",
            "text": "Adopt persistence to be able to run this in the cloud as well as on single node \"clusters\"  Update to a later version of MariaDb",
            "title": "Todo"
        },
        {
            "location": "/components/jenkins/",
            "text": "Jenkins Helm Chart\n\n\nJenkins master and slave cluster utilizing the Jenkins Kubernetes plugin\n\n\n\n\nhttps://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin\n\n\n\n\nInspired by the awesome work of Carlos Sanchez \ncarlos@apache.org\n\n\nThis chart is fully based on the chart found at the \nKubernetes Charts\n.\n\n\nChart Details\n\n\nThis chart will do the following:\n\n\n\n\n1 x Jenkins Master with port 80 exposed on an external LoadBalancer\n\n\nAll using Kubernetes Deployments\n\n\n\n\nRight now, we are using Jenkins 2.19.3.\n\n\nGet this chart\n\n\nOur central repository is located at: \nhttps://devopsku.be/charts\n, please configure this in your helm installation (via \nhelm repo add\n). Then you can download and install this chart using the usual helm procedure (see \nUsing Helm\n).\n\n\nIf you would like to contribute and/or like to make changes on this chart, please clone this repo via:\n\n\ngit clone https://github.com/devopskube/devopskube.git\n\n\nInstalling the Chart\n\n\nThe installation-instructions can be found on the above mentioned \nUsing Helm\n page.\n\n\nConfiguration\n\n\nThe following tables lists the configurable parameters of the Jenkins chart and their default values.\n\n\nJenkins Master\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmaster.name\n\n\nJenkins master name\n\n\njenkins-master\n\n\n\n\n\n\nmaster.image\n\n\nMaster image name\n\n\ngcr.io/kubernetes-charts-ci/jenkins-master-k8s\n\n\n\n\n\n\nmaster.imageTag\n\n\nMaster image tag\n\n\nv0.1.0\n\n\n\n\n\n\nmaster.imagePullPolicy\n\n\nMaster image pull policy\n\n\nAlways\n\n\n\n\n\n\nmaster.vomponent\n\n\nk8s selector key\n\n\njenkins-master\n\n\n\n\n\n\nmaster.cpu\n\n\nMaster requested cpu\n\n\n200m\n\n\n\n\n\n\nmaster.memory\n\n\nMaster requested memory\n\n\n256Mi\n\n\n\n\n\n\nmaster.servicePort\n\n\nk8s service port\n\n\n80\n\n\n\n\n\n\nmaster.containerPort\n\n\nMaster listening port\n\n\n8080\n\n\n\n\n\n\nmaster.slaveListenerPort\n\n\nListening port for agents\n\n\n50000\n\n\n\n\n\n\nmaster.adminUser\n\n\nThe initial admin user\n\n\nadmin\n\n\n\n\n\n\nmaster.adminPassword\n\n\nThe initial admin user password\n\n\nadmin1234\n\n\n\n\n\n\nmaster.javaOpts\n\n\nSome java options\n\n\n-Xms512m -Xmx512m\n\n\n\n\n\n\nmaster.hostName\n\n\nThe hostName of the jenkins instance\n\n\njenkins.example.com\n\n\n\n\n\n\nmaster.systemMessaage\n\n\nThe Systemmessage\n\n\nDevOpsKube Build Server\n\n\n\n\n\n\npersistence.path\n\n\nThe path where data is stored\n\n\n/data/jenkins\n\n\n\n\n\n\n\n\nJenkins Agent\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nagent.image\n\n\nAgent image name\n\n\njenkinsci/jnlp-slave\n\n\n\n\n\n\nagent.imageTag\n\n\nAgent image tag\n\n\n2.52\n\n\n\n\n\n\nagent.cpu\n\n\nAgent requested cpu\n\n\n200m\n\n\n\n\n\n\nagent.memory\n\n\nAgent requested memory\n\n\n256Mi\n\n\n\n\n\n\n\n\nOther Settings\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsmtp.host\n\n\nSmtp Host\n\n\nmail.example.com\n\n\n\n\n\n\nsmtp.port\n\n\nSmtp Host Port\n\n\n999\n\n\n\n\n\n\nsmtp.replyTo\n\n\nThe replyTo Address\n\n\nbuildmaster@example.com\n\n\n\n\n\n\nsmtp.auth.userName\n\n\nThe username to authenticate on the smtp server\n\n\nbuildmaster@example.com\n\n\n\n\n\n\ndocker.account\n\n\nDocker Registry Login\n\n\nyourUserName\n\n\n\n\n\n\ndocker.password\n\n\nDocker Registry Password\n\n\nyourPassword\n\n\n\n\n\n\n\n\nSpecify each parameter using the \n--set key=value[,key=value]\n argument to \nhelm install\n.\n\n\nAlternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,\n\n\n$ helm install --name my-jenkins -f values.yaml jenkins-x.x.x.tgz\n\n\n\n\n\n\nTip\n: You can use the default \nvalues.yaml\n\n\n\n\nPersistence\n\n\nTo be able to keep stateful data in the jenkins kubernetes container, the following path is used:\n\n\n/data/jenkins\n\n\n\n\nRight now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.\n\n\nTodo\n\n\n\n\nEnable Docker-in-Docker or Docker-on-Docker support on the Jenkins agents\n\n\nAdd SSO\n\n\nUse persistence volume claims\n\n\npre-start script\n\n\ninstall needs volume on host (with correct rights \nsudo chown 1000:1000 jenkins\n)",
            "title": "Jenkins"
        },
        {
            "location": "/components/jenkins/#jenkins-helm-chart",
            "text": "Jenkins master and slave cluster utilizing the Jenkins Kubernetes plugin   https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin   Inspired by the awesome work of Carlos Sanchez  carlos@apache.org  This chart is fully based on the chart found at the  Kubernetes Charts .",
            "title": "Jenkins Helm Chart"
        },
        {
            "location": "/components/jenkins/#chart-details",
            "text": "This chart will do the following:   1 x Jenkins Master with port 80 exposed on an external LoadBalancer  All using Kubernetes Deployments   Right now, we are using Jenkins 2.19.3.",
            "title": "Chart Details"
        },
        {
            "location": "/components/jenkins/#get-this-chart",
            "text": "Our central repository is located at:  https://devopsku.be/charts , please configure this in your helm installation (via  helm repo add ). Then you can download and install this chart using the usual helm procedure (see  Using Helm ).  If you would like to contribute and/or like to make changes on this chart, please clone this repo via:  git clone https://github.com/devopskube/devopskube.git",
            "title": "Get this chart"
        },
        {
            "location": "/components/jenkins/#installing-the-chart",
            "text": "The installation-instructions can be found on the above mentioned  Using Helm  page.",
            "title": "Installing the Chart"
        },
        {
            "location": "/components/jenkins/#configuration",
            "text": "The following tables lists the configurable parameters of the Jenkins chart and their default values.",
            "title": "Configuration"
        },
        {
            "location": "/components/jenkins/#jenkins-master",
            "text": "Parameter  Description  Default      master.name  Jenkins master name  jenkins-master    master.image  Master image name  gcr.io/kubernetes-charts-ci/jenkins-master-k8s    master.imageTag  Master image tag  v0.1.0    master.imagePullPolicy  Master image pull policy  Always    master.vomponent  k8s selector key  jenkins-master    master.cpu  Master requested cpu  200m    master.memory  Master requested memory  256Mi    master.servicePort  k8s service port  80    master.containerPort  Master listening port  8080    master.slaveListenerPort  Listening port for agents  50000    master.adminUser  The initial admin user  admin    master.adminPassword  The initial admin user password  admin1234    master.javaOpts  Some java options  -Xms512m -Xmx512m    master.hostName  The hostName of the jenkins instance  jenkins.example.com    master.systemMessaage  The Systemmessage  DevOpsKube Build Server    persistence.path  The path where data is stored  /data/jenkins",
            "title": "Jenkins Master"
        },
        {
            "location": "/components/jenkins/#jenkins-agent",
            "text": "Parameter  Description  Default      agent.image  Agent image name  jenkinsci/jnlp-slave    agent.imageTag  Agent image tag  2.52    agent.cpu  Agent requested cpu  200m    agent.memory  Agent requested memory  256Mi",
            "title": "Jenkins Agent"
        },
        {
            "location": "/components/jenkins/#other-settings",
            "text": "Parameter  Description  Default      smtp.host  Smtp Host  mail.example.com    smtp.port  Smtp Host Port  999    smtp.replyTo  The replyTo Address  buildmaster@example.com    smtp.auth.userName  The username to authenticate on the smtp server  buildmaster@example.com    docker.account  Docker Registry Login  yourUserName    docker.password  Docker Registry Password  yourPassword     Specify each parameter using the  --set key=value[,key=value]  argument to  helm install .  Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,  $ helm install --name my-jenkins -f values.yaml jenkins-x.x.x.tgz   Tip : You can use the default  values.yaml",
            "title": "Other Settings"
        },
        {
            "location": "/components/jenkins/#persistence",
            "text": "To be able to keep stateful data in the jenkins kubernetes container, the following path is used:  /data/jenkins  Right now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.",
            "title": "Persistence"
        },
        {
            "location": "/components/jenkins/#todo",
            "text": "Enable Docker-in-Docker or Docker-on-Docker support on the Jenkins agents  Add SSO  Use persistence volume claims  pre-start script  install needs volume on host (with correct rights  sudo chown 1000:1000 jenkins )",
            "title": "Todo"
        },
        {
            "location": "/components/keycloak/",
            "text": "Keycloak Helm Chart\n\n\nKeycloak\n is an Open Source Identity and Access Management.\n\n\nThis chart is partially based on the chart found at the \nFabric8 Charts\n.\n\n\nChart Details\n\n\nRight now, we are using the docker Image from \njboss\n in the version 2.2.1.\n\n\nGet this chart\n\n\nOur central repository is located at: \nhttps://devopsku.be/charts\n, please configure this in your helm installation (via \nhelm repo add\n). Then you can download and install this chart using the usual helm procedure (see \nUsing Helm\n).\n\n\nIf you would like to contribute and/or like to make changes on this chart, please clone this repo via:\n\n\ngit clone https://github.com/devopskube/devopskube.git\n\n\nInstalling the Chart\n\n\nThe installation-instructions can be found on the above mentioned \nUsing Helm\n page.\n\n\nConfiguration\n\n\nThe following table lists the configurable parameters of the Keycloak chart and their default values.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nhostName\n\n\nHostname where this Instance can be reached\n\n\nkey.example.com\n\n\n\n\n\n\nkeycloakUser\n\n\nInitial admin user\n\n\nadmin\n\n\n\n\n\n\nkeycloakPass\n\n\nInitial password of the admin user\n\n\nadmin123\n\n\n\n\n\n\ncontainerPort\n\n\nListening port of the container\n\n\n8080\n\n\n\n\n\n\nlogLevel\n\n\nLogLevel of the keycloak server\n\n\nINFO\n\n\n\n\n\n\nmysql.databasePort\n\n\nThe port of the database\n\n\n3306\n\n\n\n\n\n\nmysql.databaseName\n\n\nThe name of the database\n\n\nkeycloak\n\n\n\n\n\n\nmysql.databaseUser\n\n\nThe database user\n\n\nkeycloak\n\n\n\n\n\n\nmysql.databasePassword\n\n\nThe password of the database\n\n\nkeycloak\n\n\n\n\n\n\nmysql.persistence.path\n\n\nthe path where the mysql stores the data on the  node\n\n\n/data/keycloak/mysql\n\n\n\n\n\n\n\n\nSpecify each parameter using the \n--set key=value[,key=value]\n argument to \nhelm install\n.\n\n\nAlternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,\n\n\n$ helm install --name my-keycloak -f values.yaml keycloak-x.x.x.tgz\n\n\n\n\n\n\nTip\n: You can use the default \nvalues.yaml\n\n\n\n\nPersistence\n\n\nThis chart does not store any data on any volume.\n\n\nTodo\n\n\n\n\nRemove mysql dependency chart\n\n\nAdd required.txt for the dependency\n\n\nAdd LDAP",
            "title": "Keycloak"
        },
        {
            "location": "/components/keycloak/#keycloak-helm-chart",
            "text": "Keycloak  is an Open Source Identity and Access Management.  This chart is partially based on the chart found at the  Fabric8 Charts .",
            "title": "Keycloak Helm Chart"
        },
        {
            "location": "/components/keycloak/#chart-details",
            "text": "Right now, we are using the docker Image from  jboss  in the version 2.2.1.",
            "title": "Chart Details"
        },
        {
            "location": "/components/keycloak/#get-this-chart",
            "text": "Our central repository is located at:  https://devopsku.be/charts , please configure this in your helm installation (via  helm repo add ). Then you can download and install this chart using the usual helm procedure (see  Using Helm ).  If you would like to contribute and/or like to make changes on this chart, please clone this repo via:  git clone https://github.com/devopskube/devopskube.git",
            "title": "Get this chart"
        },
        {
            "location": "/components/keycloak/#installing-the-chart",
            "text": "The installation-instructions can be found on the above mentioned  Using Helm  page.",
            "title": "Installing the Chart"
        },
        {
            "location": "/components/keycloak/#configuration",
            "text": "The following table lists the configurable parameters of the Keycloak chart and their default values.     Parameter  Description  Default      hostName  Hostname where this Instance can be reached  key.example.com    keycloakUser  Initial admin user  admin    keycloakPass  Initial password of the admin user  admin123    containerPort  Listening port of the container  8080    logLevel  LogLevel of the keycloak server  INFO    mysql.databasePort  The port of the database  3306    mysql.databaseName  The name of the database  keycloak    mysql.databaseUser  The database user  keycloak    mysql.databasePassword  The password of the database  keycloak    mysql.persistence.path  the path where the mysql stores the data on the  node  /data/keycloak/mysql     Specify each parameter using the  --set key=value[,key=value]  argument to  helm install .  Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,  $ helm install --name my-keycloak -f values.yaml keycloak-x.x.x.tgz   Tip : You can use the default  values.yaml",
            "title": "Configuration"
        },
        {
            "location": "/components/keycloak/#persistence",
            "text": "This chart does not store any data on any volume.",
            "title": "Persistence"
        },
        {
            "location": "/components/keycloak/#todo",
            "text": "Remove mysql dependency chart  Add required.txt for the dependency  Add LDAP",
            "title": "Todo"
        },
        {
            "location": "/components/kube-lego/",
            "text": "Kube-Lego\n\n\nKube-Lego\n automatically requests certificates for Kubernetes Ingress resources from Let's Encrypt.\n\n\nChart Details\n\n\nThis chart is fully based on the \nexamples\n found on their github pages.\n\n\nIt uses version 0.1.2 of the corresponding docker image.\n\n\nThis chart needs a Nodeport, so that the letsencrypt server can contact us. This is configured via the properties .Values.extNodePort as well as .Values.legoKubeApiUrl.\n\n\nGet this Chart\n\n\nOur central repository is located at: \nhttps://devopsku.be/charts\n, please configure this in your helm installation (via \nhelm repo add\n). Then you can download and install this chart using the usual helm procedure (see \nUsing Helm\n).\n\n\nIf you would like to contribute and/or like to make changes on this chart, please clone this repo via:\n\n\ngit clone https://github.com/devopskube/devopskube.git\n\n\nInstalling the chart\n\n\nThe installation-instructions can be found on the above mentioned \nUsing Helm\n page.\n\n\nConfiguration\n\n\nThe following tables lists the configurable parameters of the SonarQuebe chart and their default values.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nemail\n\n\nThe email with which the certs are generated at LetsEncrypt\n\n\ncert@example.com\n\n\n\n\n\n\nlego_url\n\n\nThe Url with which the certificates are created, staging by default\n\n\nhttps://acme-staging.api.letsencrypt.org/directory\n\n\n\n\n\n\ncontainerPort\n\n\nPort of the container\n\n\n8080\n\n\n\n\n\n\nlegoKubeApiUrl\n\n\nUrl where the letsencrypt server contacts us\n\n\nhttp://lego.example.com\n\n\n\n\n\n\nextNodePort\n\n\nThe external port, where letsencrypt server contacts us\n\n\n32767\n\n\n\n\n\n\n\n\nSpecify each parameter using the --set key=value[,key=value] argument to helm install.\n\n\nAlternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,\n\n\n$ helm install --name my-kube-lego -f values.private.yaml kube-lego-x.x.x.tgz\n\n\n\n\n\n\nTip\n: You can use the default \nvalues.yaml\n\n\nTip\n: To use this in a production environment (not recommended by now), you should set the lego_url property to the corresponding production url of letsencrypt (https://acme-v01.api.letsencrypt.org/directory).\n\n\n\n\nPersistence\n\n\nThis chart stores the configuration inside its own configmap, no further persistence-store is necessary.\n\n\nCheck availability\n\n\nTo check the availabilty of the kube-lego key, you can check the following url:\n\n\ncurl http://<HOSTNAME>/.well-known/acme-challenge/_selftest\n\n\n\n\nTodo",
            "title": "Kube-Lego"
        },
        {
            "location": "/components/kube-lego/#kube-lego",
            "text": "Kube-Lego  automatically requests certificates for Kubernetes Ingress resources from Let's Encrypt.",
            "title": "Kube-Lego"
        },
        {
            "location": "/components/kube-lego/#chart-details",
            "text": "This chart is fully based on the  examples  found on their github pages.  It uses version 0.1.2 of the corresponding docker image.  This chart needs a Nodeport, so that the letsencrypt server can contact us. This is configured via the properties .Values.extNodePort as well as .Values.legoKubeApiUrl.",
            "title": "Chart Details"
        },
        {
            "location": "/components/kube-lego/#get-this-chart",
            "text": "Our central repository is located at:  https://devopsku.be/charts , please configure this in your helm installation (via  helm repo add ). Then you can download and install this chart using the usual helm procedure (see  Using Helm ).  If you would like to contribute and/or like to make changes on this chart, please clone this repo via:  git clone https://github.com/devopskube/devopskube.git",
            "title": "Get this Chart"
        },
        {
            "location": "/components/kube-lego/#installing-the-chart",
            "text": "The installation-instructions can be found on the above mentioned  Using Helm  page.",
            "title": "Installing the chart"
        },
        {
            "location": "/components/kube-lego/#configuration",
            "text": "The following tables lists the configurable parameters of the SonarQuebe chart and their default values.     Parameter  Description  Default      email  The email with which the certs are generated at LetsEncrypt  cert@example.com    lego_url  The Url with which the certificates are created, staging by default  https://acme-staging.api.letsencrypt.org/directory    containerPort  Port of the container  8080    legoKubeApiUrl  Url where the letsencrypt server contacts us  http://lego.example.com    extNodePort  The external port, where letsencrypt server contacts us  32767     Specify each parameter using the --set key=value[,key=value] argument to helm install.  Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,  $ helm install --name my-kube-lego -f values.private.yaml kube-lego-x.x.x.tgz   Tip : You can use the default  values.yaml  Tip : To use this in a production environment (not recommended by now), you should set the lego_url property to the corresponding production url of letsencrypt (https://acme-v01.api.letsencrypt.org/directory).",
            "title": "Configuration"
        },
        {
            "location": "/components/kube-lego/#persistence",
            "text": "This chart stores the configuration inside its own configmap, no further persistence-store is necessary.",
            "title": "Persistence"
        },
        {
            "location": "/components/kube-lego/#check-availability",
            "text": "To check the availabilty of the kube-lego key, you can check the following url:  curl http://<HOSTNAME>/.well-known/acme-challenge/_selftest",
            "title": "Check availability"
        },
        {
            "location": "/components/kube-lego/#todo",
            "text": "",
            "title": "Todo"
        },
        {
            "location": "/components/mysql/",
            "text": "MySQL\n\n\n[MySQL]https://www.mysql.com/) is the database used in all our charts as a data store right now.\n\n\nChart Details\n\n\nThis chart is fully based on the \nKubernetes Chart\n found.\n\n\nIt uses version 0.0.1 of our own \ndocker image\n.\n\n\nGet this Chart\n\n\nOur central repository is located at: \nhttps://devopsku.be/charts\n, please configure this in your helm installation (via \nhelm repo add\n). Then you can download and install this chart using the usual helm procedure (see \nUsing Helm\n).\n\n\nIf you would like to contribute and/or like to make changes on this chart, please clone this repo via:\n\n\ngit clone https://github.com/devopskube/devopskube.git\n\n\nInstalling the chart\n\n\nThe installation-instructions can be found on the above mentioned \nUsing Helm\n page.\n\n\nConfiguration\n\n\nThe following tables lists the configurable parameters of the SonarQuebe chart and their default values.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncpu\n\n\nThe CPU resource limit\n\n\n200m\n\n\n\n\n\n\nmemory\n\n\nThe RAM resource limit\n\n\n512Mi\n\n\n\n\n\n\ndatabaseName\n\n\nThe name of the database\n\n\ntest\n\n\n\n\n\n\ndatabaseUser\n\n\nThe user of the database\n\n\ntest\n\n\n\n\n\n\ndatabasePassword\n\n\nThe password of the database user\n\n\ntest\n\n\n\n\n\n\ndatabaseCharset\n\n\nThe Charset used in the database\n\n\nutf8\n\n\n\n\n\n\ndatabaseCollation\n\n\nThe Collation used in the database\n\n\nutf8_unicode_ci\n\n\n\n\n\n\npersistence.path\n\n\nThe path where the data is stored\n\n\n/data/mysql\n\n\n\n\n\n\n\n\nSpecify each parameter using the --set key=value[,key=value] argument to helm install.\n\n\nAlternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,\n\n\n$ helm install --name my-kube-lego -f values.private.yaml kube-lego-x.x.x.tgz\n\n\n\n\n\n\nTip\n: You can use the default \nvalues.yaml\n\n\n\n\nPersistence\n\n\nTo be able to keep stateful data in the mysql kubernetes container, the following path is used:\n\n\n/data/mysql\n\n\n\n\n\n\nTip\n: This path should be adopted for each database instance you set up (eg. for each application)\n\n\n\n\nRight now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.\n\n\nTodo\n\n\n\n\nRight now SonarQube is using a MySQL version of 5.7 (this is a hardcoded requirement for MySQL), but for other Charts, we could use later versions (MariaDB)\n\n\nUse a HA/Cluster version of MariaDB/MySQL",
            "title": "MySQL"
        },
        {
            "location": "/components/mysql/#mysql",
            "text": "[MySQL]https://www.mysql.com/) is the database used in all our charts as a data store right now.",
            "title": "MySQL"
        },
        {
            "location": "/components/mysql/#chart-details",
            "text": "This chart is fully based on the  Kubernetes Chart  found.  It uses version 0.0.1 of our own  docker image .",
            "title": "Chart Details"
        },
        {
            "location": "/components/mysql/#get-this-chart",
            "text": "Our central repository is located at:  https://devopsku.be/charts , please configure this in your helm installation (via  helm repo add ). Then you can download and install this chart using the usual helm procedure (see  Using Helm ).  If you would like to contribute and/or like to make changes on this chart, please clone this repo via:  git clone https://github.com/devopskube/devopskube.git",
            "title": "Get this Chart"
        },
        {
            "location": "/components/mysql/#installing-the-chart",
            "text": "The installation-instructions can be found on the above mentioned  Using Helm  page.",
            "title": "Installing the chart"
        },
        {
            "location": "/components/mysql/#configuration",
            "text": "The following tables lists the configurable parameters of the SonarQuebe chart and their default values.     Parameter  Description  Default      cpu  The CPU resource limit  200m    memory  The RAM resource limit  512Mi    databaseName  The name of the database  test    databaseUser  The user of the database  test    databasePassword  The password of the database user  test    databaseCharset  The Charset used in the database  utf8    databaseCollation  The Collation used in the database  utf8_unicode_ci    persistence.path  The path where the data is stored  /data/mysql     Specify each parameter using the --set key=value[,key=value] argument to helm install.  Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,  $ helm install --name my-kube-lego -f values.private.yaml kube-lego-x.x.x.tgz   Tip : You can use the default  values.yaml",
            "title": "Configuration"
        },
        {
            "location": "/components/mysql/#persistence",
            "text": "To be able to keep stateful data in the mysql kubernetes container, the following path is used:  /data/mysql   Tip : This path should be adopted for each database instance you set up (eg. for each application)   Right now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.",
            "title": "Persistence"
        },
        {
            "location": "/components/mysql/#todo",
            "text": "Right now SonarQube is using a MySQL version of 5.7 (this is a hardcoded requirement for MySQL), but for other Charts, we could use later versions (MariaDB)  Use a HA/Cluster version of MariaDB/MySQL",
            "title": "Todo"
        },
        {
            "location": "/components/nexus/",
            "text": "Nexus\n\n\nThis is a helm-chart for [nexxus]\n\n\nThis chart is part of the DevOpsKube package.\n\n\nIt is right now fully based on the \nbitnami\n redmine chart.\n\n\nTODO\n\n\nthis url is password protected, therefor this can not get called without username password\n\n\nlivenessProbe:\n  httpGet:\n    path: /service/metrics/ping\n    port: http\n  initialDelaySeconds: 120\n  timeoutSeconds: 5\nreadinessProbe:\n  httpGet:\n    path: /service/metrics/ping\n    port: http\n  initialDelaySeconds: 5\n  timeoutSeconds: 1\n\n\nDependencies\n\n\nThis chart uses the following sub-dependencies:\n\n\nmariadb\n\n\nVariables\n\n\nTo be able to use this package, the following variables should be set.\n\n\nsee values.yaml\n\n\nRoadmap\n\n\nprovide git as a scm system, does not seem to work right now.\n\n\nRedmine\n\n\nNexus\n is the world's only repository manager with FREE support for popular formats..\n\n\nRight now we do use version 3.0.2.\n\n\nChart Details\n\n\nThis chart uses the docker image from \nsonatype\n.\n\n\nGet this Chart\n\n\nOur central repository is located at: \nhttps://devopsku.be/charts\n, please configure this in your helm installation (via \nhelm repo add\n). Then you can download and install this chart using the usual helm procedure (see \nUsing Helm\n).\n\n\nIf you would like to contribute and/or like to make changes on this chart, please clone this repo via:\n\n\ngit clone https://github.com/devopskube/devopskube.git\n\n\nInstalling the chart\n\n\nOther installation-instructions can be found on the above mentioned \nUsing Helm\n page.\n\n\nConfiguration\n\n\nThe following tables lists the configurable parameters of the Nexus chart and their default values.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nhostName\n\n\nHost Name of this Instance\n\n\nnexus.example.com\n\n\n\n\n\n\ncontainerPort\n\n\nPort of the container\n\n\n8081\n\n\n\n\n\n\nmaxMem\n\n\nResource limit memory (-Xmx)\n\n\n1200M\n\n\n\n\n\n\nminMem\n\n\nMinimum Memory (-Xms)\n\n\n1200M\n\n\n\n\n\n\njavaOpts\n\n\nAdditional options for the JVM\n\n\n''\n\n\n\n\n\n\npersistence.path\n\n\nPath where all data on the host is stored\n\n\n/data/nexus\n\n\n\n\n\n\n\n\nSpecify each parameter using the --set key=value[,key=value] argument to helm install.\n\n\nAlternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,\n\n\n$ helm install --name my-nexus -f values.private.yaml nexus-x.x.x.tgz\n\n\n\n\n\n\nTip\n: You can use the default \nvalues.yaml\n\n\n\n\nThe initial Username/Pasword combination for the first login is: \nadmin/admin123\n.\n\n\nPersistence\n\n\nTo be able to keep stateful data in the nexus kubernetes container, the following path is used:\n\n\n/data/nexus\n\n\n\n\nRight now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.\n\n\nTodo\n\n\n\n\nProvide more initial configurations (smtp-settings, ldap-settings, ...)\n\n\nuse LDAP and SSO",
            "title": "TheNexus"
        },
        {
            "location": "/components/nexus/#nexus",
            "text": "This is a helm-chart for [nexxus]  This chart is part of the DevOpsKube package.  It is right now fully based on the  bitnami  redmine chart.",
            "title": "Nexus"
        },
        {
            "location": "/components/nexus/#todo",
            "text": "this url is password protected, therefor this can not get called without username password  livenessProbe:\n  httpGet:\n    path: /service/metrics/ping\n    port: http\n  initialDelaySeconds: 120\n  timeoutSeconds: 5\nreadinessProbe:\n  httpGet:\n    path: /service/metrics/ping\n    port: http\n  initialDelaySeconds: 5\n  timeoutSeconds: 1",
            "title": "TODO"
        },
        {
            "location": "/components/nexus/#dependencies",
            "text": "This chart uses the following sub-dependencies:  mariadb",
            "title": "Dependencies"
        },
        {
            "location": "/components/nexus/#variables",
            "text": "To be able to use this package, the following variables should be set.  see values.yaml",
            "title": "Variables"
        },
        {
            "location": "/components/nexus/#roadmap",
            "text": "provide git as a scm system, does not seem to work right now.",
            "title": "Roadmap"
        },
        {
            "location": "/components/nexus/#redmine",
            "text": "Nexus  is the world's only repository manager with FREE support for popular formats..  Right now we do use version 3.0.2.",
            "title": "Redmine"
        },
        {
            "location": "/components/nexus/#chart-details",
            "text": "This chart uses the docker image from  sonatype .",
            "title": "Chart Details"
        },
        {
            "location": "/components/nexus/#get-this-chart",
            "text": "Our central repository is located at:  https://devopsku.be/charts , please configure this in your helm installation (via  helm repo add ). Then you can download and install this chart using the usual helm procedure (see  Using Helm ).  If you would like to contribute and/or like to make changes on this chart, please clone this repo via:  git clone https://github.com/devopskube/devopskube.git",
            "title": "Get this Chart"
        },
        {
            "location": "/components/nexus/#installing-the-chart",
            "text": "Other installation-instructions can be found on the above mentioned  Using Helm  page.",
            "title": "Installing the chart"
        },
        {
            "location": "/components/nexus/#configuration",
            "text": "The following tables lists the configurable parameters of the Nexus chart and their default values.     Parameter  Description  Default      hostName  Host Name of this Instance  nexus.example.com    containerPort  Port of the container  8081    maxMem  Resource limit memory (-Xmx)  1200M    minMem  Minimum Memory (-Xms)  1200M    javaOpts  Additional options for the JVM  ''    persistence.path  Path where all data on the host is stored  /data/nexus     Specify each parameter using the --set key=value[,key=value] argument to helm install.  Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,  $ helm install --name my-nexus -f values.private.yaml nexus-x.x.x.tgz   Tip : You can use the default  values.yaml   The initial Username/Pasword combination for the first login is:  admin/admin123 .",
            "title": "Configuration"
        },
        {
            "location": "/components/nexus/#persistence",
            "text": "To be able to keep stateful data in the nexus kubernetes container, the following path is used:  /data/nexus  Right now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.",
            "title": "Persistence"
        },
        {
            "location": "/components/nexus/#todo_1",
            "text": "Provide more initial configurations (smtp-settings, ldap-settings, ...)  use LDAP and SSO",
            "title": "Todo"
        },
        {
            "location": "/components/redmine/",
            "text": "Redmine\n\n\nRedmine\n is a flexible project management and issue tracking web application.\n\n\nThis chart was based on the \nbitnami\n redmine chart, but adopted to our needs.\n\n\nRight now we do use version 3.3.0.\n\n\nChart Details\n\n\nThis chart uses the docker image from \nsameersbn\n. Furthermore it has a requirement on our Mysql-Chart to provide a datastore.\n\n\nGet this Chart\n\n\nOur central repository is located at: \nhttps://devopsku.be/charts\n, please configure this in your helm installation (via \nhelm repo add\n). Then you can download and install this chart using the usual helm procedure (see \nUsing Helm\n).\n\n\nIf you would like to contribute and/or like to make changes on this chart, please clone this repo via:\n\n\ngit clone https://github.com/devopskube/devopskube.git\n\n\nInstalling the chart\n\n\nIf you have cloned this repository, you do need to update the requirements of this chart beforehand via \nhelm dependencies update\n in the chart-folder.\n\n\nOther installation-instructions can be found on the above mentioned \nUsing Helm\n page.\n\n\nConfiguration\n\n\nThe following tables lists the configurable parameters of the Redmine chart and their default values.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nhostName\n\n\nHost Name of this Instance\n\n\nredmine.example.com\n\n\n\n\n\n\nredminePort\n\n\nPort of the container\n\n\n80\n\n\n\n\n\n\nredmineHttps\n\n\nShould https be enabled\n\n\nfalse\n\n\n\n\n\n\nnginx.enabled\n\n\nShould the Nginx-Server be startet\n\n\ntrue\n\n\n\n\n\n\nnginx.workers\n\n\nThe number of nginx workers to start.\n\n\n1\n\n\n\n\n\n\nnginx.maxUploadSize\n\n\nMaximum acceptable upload size\n\n\n20m\n\n\n\n\n\n\nunicorn.workers\n\n\nThe number of unicorn workers to start\n\n\n2\n\n\n\n\n\n\nunicorn.timeout\n\n\nSets the timeout of unicorn worker processes\n\n\n60\n\n\n\n\n\n\nsmtp.enabled\n\n\nEnable mail delivery via SMTP\n\n\nfalse\n\n\n\n\n\n\nsmtp.domain\n\n\nSMTP domain\n\n\nexample.com\n\n\n\n\n\n\nsmtp.host\n\n\nSMTP server host\n\n\nsmtp.google.com\n\n\n\n\n\n\nsmtp.port\n\n\nSMTP server port\n\n\n587\n\n\n\n\n\n\nsmtp.user\n\n\nSMTP username\n\n\nusername\n\n\n\n\n\n\nsmtp.pass\n\n\nSMTP password\n\n\npassword\n\n\n\n\n\n\nsmtp.method\n\n\nSMTP delivery method. Possible values: \nsmtp\n, \nasync_smtp\n\n\nsmtp\n\n\n\n\n\n\nsmtp.opensslVerifyMode\n\n\nSMTP openssl verification mode. Accepted values are \nnone\n, \npeer\n, \nclient_once\n and \nfail_if_no_peer_cert\n\n\nnone\n\n\n\n\n\n\nsmtp.startTLS\n\n\nEnable STARTTLS\n\n\ntrue\n\n\n\n\n\n\nsmtp.TLS\n\n\nEnable SSL/TLS\n\n\nfalse\n\n\n\n\n\n\nsmtp.authentication\n\n\nSpecify the SMTP authentication method\n\n\n:login\n\n\n\n\n\n\npersistence.enabled\n\n\nEnable persistence\n\n\ntrue\n\n\n\n\n\n\npersistence.storageClass\n\n\nstorageClass\n\n\ngeneric\n\n\n\n\n\n\npersistence.accessMode\n\n\nAccess Mode of the persistence volume\n\n\nReadWriteOnce\n\n\n\n\n\n\npersistence.size\n\n\nSize of the volume\n\n\n8Gi\n\n\n\n\n\n\npersistence.path\n\n\nPath where all data on the host is stored\n\n\n/data/redmine/files\n\n\n\n\n\n\ndatabaseAdapter\n\n\nThe databaseAdapter to use \nmysql\n. \nmysql2\n or \npostgresql\n\n\nmysql\n\n\n\n\n\n\nmysql.databasePort\n\n\nThe port of the database\n\n\n3306\n\n\n\n\n\n\nmysql.databaseName\n\n\nThe name of the database\n\n\nredmine\n\n\n\n\n\n\nmysql.databaseUser\n\n\nThe database user\n\n\nredmine\n\n\n\n\n\n\nmysql.databasePassword\n\n\nThe password of the database\n\n\nredmine\n\n\n\n\n\n\nmysql.persistence.path\n\n\nthe path where the mysql stores the data on the  node\n\n\n/data/redmine/mysql\n\n\n\n\n\n\n\n\n\n\nNOTE\n: The persistence settings are right now rather useless (except the path), since we are not using any persistence claim, we are still using hostpath\n\n\n\n\nSpecify each parameter using the --set key=value[,key=value] argument to helm install.\n\n\nAlternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,\n\n\n$ helm install --name my-redmine -f values.private.yaml redmine-x.x.x.tgz\n\n\n\n\n\n\nTip\n: You can use the default \nvalues.yaml\n\n\n\n\nThe initial Username/Pasword combination for the first login is: \nadmin/admin\n.\n\n\nPersistence\n\n\nTo be able to keep stateful data in the redmine kubernetes container, the following path is used:\n\n\n/data/redmine/data\n\n\n\n\nRight now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.\n\n\nTodo\n\n\n\n\nAdopt persistence to be able to run this in the cloud as well as on single node \"clusters\"\n\n\nUpdate to a later version of MariaDb\n\n\nUse LDAP and SSO",
            "title": "Redmine"
        },
        {
            "location": "/components/redmine/#redmine",
            "text": "Redmine  is a flexible project management and issue tracking web application.  This chart was based on the  bitnami  redmine chart, but adopted to our needs.  Right now we do use version 3.3.0.",
            "title": "Redmine"
        },
        {
            "location": "/components/redmine/#chart-details",
            "text": "This chart uses the docker image from  sameersbn . Furthermore it has a requirement on our Mysql-Chart to provide a datastore.",
            "title": "Chart Details"
        },
        {
            "location": "/components/redmine/#get-this-chart",
            "text": "Our central repository is located at:  https://devopsku.be/charts , please configure this in your helm installation (via  helm repo add ). Then you can download and install this chart using the usual helm procedure (see  Using Helm ).  If you would like to contribute and/or like to make changes on this chart, please clone this repo via:  git clone https://github.com/devopskube/devopskube.git",
            "title": "Get this Chart"
        },
        {
            "location": "/components/redmine/#installing-the-chart",
            "text": "If you have cloned this repository, you do need to update the requirements of this chart beforehand via  helm dependencies update  in the chart-folder.  Other installation-instructions can be found on the above mentioned  Using Helm  page.",
            "title": "Installing the chart"
        },
        {
            "location": "/components/redmine/#configuration",
            "text": "The following tables lists the configurable parameters of the Redmine chart and their default values.     Parameter  Description  Default      hostName  Host Name of this Instance  redmine.example.com    redminePort  Port of the container  80    redmineHttps  Should https be enabled  false    nginx.enabled  Should the Nginx-Server be startet  true    nginx.workers  The number of nginx workers to start.  1    nginx.maxUploadSize  Maximum acceptable upload size  20m    unicorn.workers  The number of unicorn workers to start  2    unicorn.timeout  Sets the timeout of unicorn worker processes  60    smtp.enabled  Enable mail delivery via SMTP  false    smtp.domain  SMTP domain  example.com    smtp.host  SMTP server host  smtp.google.com    smtp.port  SMTP server port  587    smtp.user  SMTP username  username    smtp.pass  SMTP password  password    smtp.method  SMTP delivery method. Possible values:  smtp ,  async_smtp  smtp    smtp.opensslVerifyMode  SMTP openssl verification mode. Accepted values are  none ,  peer ,  client_once  and  fail_if_no_peer_cert  none    smtp.startTLS  Enable STARTTLS  true    smtp.TLS  Enable SSL/TLS  false    smtp.authentication  Specify the SMTP authentication method  :login    persistence.enabled  Enable persistence  true    persistence.storageClass  storageClass  generic    persistence.accessMode  Access Mode of the persistence volume  ReadWriteOnce    persistence.size  Size of the volume  8Gi    persistence.path  Path where all data on the host is stored  /data/redmine/files    databaseAdapter  The databaseAdapter to use  mysql .  mysql2  or  postgresql  mysql    mysql.databasePort  The port of the database  3306    mysql.databaseName  The name of the database  redmine    mysql.databaseUser  The database user  redmine    mysql.databasePassword  The password of the database  redmine    mysql.persistence.path  the path where the mysql stores the data on the  node  /data/redmine/mysql      NOTE : The persistence settings are right now rather useless (except the path), since we are not using any persistence claim, we are still using hostpath   Specify each parameter using the --set key=value[,key=value] argument to helm install.  Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,  $ helm install --name my-redmine -f values.private.yaml redmine-x.x.x.tgz   Tip : You can use the default  values.yaml   The initial Username/Pasword combination for the first login is:  admin/admin .",
            "title": "Configuration"
        },
        {
            "location": "/components/redmine/#persistence",
            "text": "To be able to keep stateful data in the redmine kubernetes container, the following path is used:  /data/redmine/data  Right now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.",
            "title": "Persistence"
        },
        {
            "location": "/components/redmine/#todo",
            "text": "Adopt persistence to be able to run this in the cloud as well as on single node \"clusters\"  Update to a later version of MariaDb  Use LDAP and SSO",
            "title": "Todo"
        },
        {
            "location": "/components/sonarqube/",
            "text": "SonarQube\n\n\nSonarQube\n is an open platform to manage code quality.\n\n\nRight now we do use version 6.1.\n\n\nChart Details\n\n\nThis chart uses the docker image from \nsonarqube\n. Furthermore it has a requirement on our Mysql-Chart to provide a datastore.\n\n\nGet this Chart\n\n\nOur central repository is located at: \nhttps://devopsku.be/charts\n, please configure this in your helm installation (via \nhelm repo add\n). Then you can download and install this chart using the usual helm procedure (see \nUsing Helm\n).\n\n\nIf you would like to contribute and/or like to make changes on this chart, please clone this repo via:\n\n\ngit clone https://github.com/devopskube/devopskube.git\n\n\nInstalling the chart\n\n\nIf you have cloned this repository, you do need to update the requirements of this chart beforehand via \nhelm dependencies update\n in the chart-folder.\n\n\nOther installation-instructions can be found on the above mentioned \nUsing Helm\n page.\n\n\nConfiguration\n\n\nThe following tables lists the configurable parameters of the SonarQuebe chart and their default values.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nhostName\n\n\nHost Name of this Instance\n\n\nsonar.example.com\n\n\n\n\n\n\ncontainerPort\n\n\nPort of the container\n\n\n9000\n\n\n\n\n\n\npersistence.dataPath\n\n\nPath were the data of SonarQube is stored\n\n\n/data/sonarqube/data\n\n\n\n\n\n\npersistence.extensionsPath\n\n\nPath were extenstions to SonarQube are stored\n\n\n/data/sonarqube/extensions\n\n\n\n\n\n\nmysql.databasePort\n\n\nThe port of the database\n\n\n3306\n\n\n\n\n\n\nmysql.databaseName\n\n\nThe name of the database\n\n\nsonar\n\n\n\n\n\n\nmysql.databaseUser\n\n\nThe database user\n\n\nsonar\n\n\n\n\n\n\nmysql.databasePassword\n\n\nThe password of the database\n\n\nsonar\n\n\n\n\n\n\nmysql.persistence.path\n\n\nthe path where the mysql stores the data on the  node\n\n\n/data/sonarqube/mysql\n\n\n\n\n\n\n\n\nSpecify each parameter using the --set key=value[,key=value] argument to helm install.\n\n\nAlternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,\n\n\n$ helm install --name my-sonar -f values.private.yaml sonarqube-x.x.x.tgz\n\n\n\n\n\n\nTip\n: You can use the default \nvalues.yaml\n\n\n\n\nThe initial Username/Pasword combination for the first login is: \nadmin/admin\n.\n\n\nPersistence\n\n\nTo be able to keep stateful data in the redmine kubernetes container, the following path is used:\n\n\n/data/sonarqube/data\n\n\n\n\nRight now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.\n\n\nTodo\n\n\n\n\nAdopt persistence to be able to run this in the cloud as well as on single node \"clusters\"\n\n\nUpdate to a later version of MariaDb\n\n\nUse LDAP and SSO",
            "title": "SonarQube"
        },
        {
            "location": "/components/sonarqube/#sonarqube",
            "text": "SonarQube  is an open platform to manage code quality.  Right now we do use version 6.1.",
            "title": "SonarQube"
        },
        {
            "location": "/components/sonarqube/#chart-details",
            "text": "This chart uses the docker image from  sonarqube . Furthermore it has a requirement on our Mysql-Chart to provide a datastore.",
            "title": "Chart Details"
        },
        {
            "location": "/components/sonarqube/#get-this-chart",
            "text": "Our central repository is located at:  https://devopsku.be/charts , please configure this in your helm installation (via  helm repo add ). Then you can download and install this chart using the usual helm procedure (see  Using Helm ).  If you would like to contribute and/or like to make changes on this chart, please clone this repo via:  git clone https://github.com/devopskube/devopskube.git",
            "title": "Get this Chart"
        },
        {
            "location": "/components/sonarqube/#installing-the-chart",
            "text": "If you have cloned this repository, you do need to update the requirements of this chart beforehand via  helm dependencies update  in the chart-folder.  Other installation-instructions can be found on the above mentioned  Using Helm  page.",
            "title": "Installing the chart"
        },
        {
            "location": "/components/sonarqube/#configuration",
            "text": "The following tables lists the configurable parameters of the SonarQuebe chart and their default values.     Parameter  Description  Default      hostName  Host Name of this Instance  sonar.example.com    containerPort  Port of the container  9000    persistence.dataPath  Path were the data of SonarQube is stored  /data/sonarqube/data    persistence.extensionsPath  Path were extenstions to SonarQube are stored  /data/sonarqube/extensions    mysql.databasePort  The port of the database  3306    mysql.databaseName  The name of the database  sonar    mysql.databaseUser  The database user  sonar    mysql.databasePassword  The password of the database  sonar    mysql.persistence.path  the path where the mysql stores the data on the  node  /data/sonarqube/mysql     Specify each parameter using the --set key=value[,key=value] argument to helm install.  Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,  $ helm install --name my-sonar -f values.private.yaml sonarqube-x.x.x.tgz   Tip : You can use the default  values.yaml   The initial Username/Pasword combination for the first login is:  admin/admin .",
            "title": "Configuration"
        },
        {
            "location": "/components/sonarqube/#persistence",
            "text": "To be able to keep stateful data in the redmine kubernetes container, the following path is used:  /data/sonarqube/data  Right now, we do use HostPathes, which do not work in a real cluster environment (like AWS or GCE). Please adopt this one to your own needs.",
            "title": "Persistence"
        },
        {
            "location": "/components/sonarqube/#todo",
            "text": "Adopt persistence to be able to run this in the cloud as well as on single node \"clusters\"  Update to a later version of MariaDb  Use LDAP and SSO",
            "title": "Todo"
        },
        {
            "location": "/about/license/",
            "text": "License\n\n\nThe MIT License (MIT)\nCopyright (c) 2016 Markus M. May\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "The MIT License (MIT)\nCopyright (c) 2016 Markus M. May\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/about/team/",
            "text": "Team\n\n\nRight now, the Team consist of the following members and contributors:\n\n\nMarkus M. May\n\n\n\n\nFounder and Penguine Herder, living in the \nIntertubes\n\n\nYou?\n\n\nYour participation and contribution is greatly welcome.",
            "title": "Team"
        },
        {
            "location": "/about/team/#team",
            "text": "Right now, the Team consist of the following members and contributors:",
            "title": "Team"
        },
        {
            "location": "/about/team/#markus-m-may",
            "text": "Founder and Penguine Herder, living in the  Intertubes",
            "title": "Markus M. May"
        },
        {
            "location": "/about/team/#you",
            "text": "Your participation and contribution is greatly welcome.",
            "title": "You?"
        },
        {
            "location": "/about/release-notes/",
            "text": "Release Notes\n\n\nnothing released yet...",
            "title": "Release Notes"
        },
        {
            "location": "/about/release-notes/#release-notes",
            "text": "nothing released yet...",
            "title": "Release Notes"
        },
        {
            "location": "/about/roadmap/",
            "text": "Roadmap\n\n\nWe decided to use the following Roadmap to be able to provide some useful Components already and to have something to extend on.\n\n\nNote, that this roadmap is not fixed yet and it could be, that some mentioned features are coming in later versions. This roadmap should just describe the rough idead where DevOpsKube is heading to. Furthermore some tasks are most probably not mentioned and have to be done in some of these versions as well ;-)\n\n\nVersion 0.1\n\n\nAll Components mentioned on our \nHomepage\n should be provided using MySql. Furthermore the configuration for these components is provided and documented. All necessary steps to setup a single node cluster (based on \nCoreOS\n) will be documented as well.\n\n\nFurthermore provide tools/documentation on how to generate the charts and offer a download-area for those.\n\n\nThis will be a pre-liminary version to provide all the components and steps to build up the future \"development\" environment.\n\n\nVersion 0.2\n\n\nAdd additional components for eg. SSO and other things, which can be useful in an SDLC Stack:\n\n\n\n\nKeycloak\n - SSO Solution\n\n\nELK\n - Log Stack\n\n\n\n\nVersion 0.3\n\n\nAdditional functionality to be able to create projects via a single REST-API call. This is the first version with some unique functionality. The REST-API should include a web-based client as well as a Command-line client.\n\n\nVersion 0.4\n\n\nAdd additional components to the Stack to provide a fully featured SDLC Stack. These components could be:\n\n\n\n\nGerrit\n - Web based code Review\n\n\nRocket.chat\n - A chat application\n\n\nGitBucket\n - An open source Github clone (replace Gogs?)\n\n\n\n\nVersion 0.5\n\n\nMake all of the components (if upstream allows) HA-able. Furthermore integrate those as much as possible.\n\n\nVersion 0.6\n\n\nBe self-hosted. We should eat our own dog-food, therefor we should host this project on our own Kubernetes Cluster. We do look for a in-expensive Hosting solution here. Do you like to offer your Hosts?",
            "title": "Roadmap"
        },
        {
            "location": "/about/roadmap/#roadmap",
            "text": "We decided to use the following Roadmap to be able to provide some useful Components already and to have something to extend on.  Note, that this roadmap is not fixed yet and it could be, that some mentioned features are coming in later versions. This roadmap should just describe the rough idead where DevOpsKube is heading to. Furthermore some tasks are most probably not mentioned and have to be done in some of these versions as well ;-)",
            "title": "Roadmap"
        },
        {
            "location": "/about/roadmap/#version-01",
            "text": "All Components mentioned on our  Homepage  should be provided using MySql. Furthermore the configuration for these components is provided and documented. All necessary steps to setup a single node cluster (based on  CoreOS ) will be documented as well.  Furthermore provide tools/documentation on how to generate the charts and offer a download-area for those.  This will be a pre-liminary version to provide all the components and steps to build up the future \"development\" environment.",
            "title": "Version 0.1"
        },
        {
            "location": "/about/roadmap/#version-02",
            "text": "Add additional components for eg. SSO and other things, which can be useful in an SDLC Stack:   Keycloak  - SSO Solution  ELK  - Log Stack",
            "title": "Version 0.2"
        },
        {
            "location": "/about/roadmap/#version-03",
            "text": "Additional functionality to be able to create projects via a single REST-API call. This is the first version with some unique functionality. The REST-API should include a web-based client as well as a Command-line client.",
            "title": "Version 0.3"
        },
        {
            "location": "/about/roadmap/#version-04",
            "text": "Add additional components to the Stack to provide a fully featured SDLC Stack. These components could be:   Gerrit  - Web based code Review  Rocket.chat  - A chat application  GitBucket  - An open source Github clone (replace Gogs?)",
            "title": "Version 0.4"
        },
        {
            "location": "/about/roadmap/#version-05",
            "text": "Make all of the components (if upstream allows) HA-able. Furthermore integrate those as much as possible.",
            "title": "Version 0.5"
        },
        {
            "location": "/about/roadmap/#version-06",
            "text": "Be self-hosted. We should eat our own dog-food, therefor we should host this project on our own Kubernetes Cluster. We do look for a in-expensive Hosting solution here. Do you like to offer your Hosts?",
            "title": "Version 0.6"
        }
    ]
}